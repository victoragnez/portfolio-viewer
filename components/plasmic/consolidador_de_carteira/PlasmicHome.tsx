// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDBRKAPkGAJGJDHPJiLdSk
// Component: W5b0V4_JmHYlf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Switch from "../../Switch"; // plasmic-import: XQA6zh3cTBE/component
import AssetGroupChart from "../../AssetGroupChart"; // plasmic-import: HJ5nLaIXID/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_consolidador_de_carteira.module.css"; // plasmic-import: iDBRKAPkGAJGJDHPJiLdSk/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: W5b0V4_JmHYlf/css

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  appTitle?: p.Flex<"div">;
  balanceContainer?: p.Flex<"div">;
  text?: p.Flex<"div">;
  balanceValue?: p.Flex<"span">;
  multiLine?: p.Flex<typeof Switch>;
  contents?: p.Flex<"div">;
  assetGroupChart?: p.Flex<typeof AssetGroupChart>;
};

export interface DefaultHomeProps {}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.appTitle
            )}
          >
            {"Carteira"}
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1Nw4Q)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kHeUj)}>
                  {true ? (
                    <div
                      data-plasmic-name={"balanceContainer"}
                      data-plasmic-override={overrides.balanceContainer}
                      className={classNames(
                        projectcss.all,
                        sty.balanceContainer
                      )}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{"Patrim√¥nio: R$ "}</React.Fragment>
                          {
                            <span
                              data-plasmic-name={"balanceValue"}
                              data-plasmic-override={overrides.balanceValue}
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.balanceValue
                              )}
                            >
                              {"*******"}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}

                  <Switch
                    data-plasmic-name={"multiLine"}
                    data-plasmic-override={overrides.multiLine}
                    className={classNames("__wab_instance", sty.multiLine)}
                  >
                    {"Multi-linha  "}
                  </Switch>
                </div>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"contents"}
                  data-plasmic-override={overrides.contents}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.contents)}
                >
                  {true ? (
                    <AssetGroupChart
                      data-plasmic-name={"assetGroupChart"}
                      data-plasmic-override={overrides.assetGroupChart}
                      className={classNames(
                        "__wab_instance",
                        sty.assetGroupChart
                      )}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "balanceContainer",
    "text",
    "balanceValue",
    "multiLine",
    "contents",
    "assetGroupChart",
  ],
  appTitle: ["appTitle"],
  balanceContainer: ["balanceContainer", "text", "balanceValue"],
  text: ["text", "balanceValue"],
  balanceValue: ["balanceValue"],
  multiLine: ["multiLine"],
  contents: ["contents", "assetGroupChart"],
  assetGroupChart: ["assetGroupChart"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  appTitle: "div";
  balanceContainer: "div";
  text: "div";
  balanceValue: "span";
  multiLine: typeof Switch;
  contents: "div";
  assetGroupChart: typeof AssetGroupChart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    balanceContainer: makeNodeComponent("balanceContainer"),
    text: makeNodeComponent("text"),
    balanceValue: makeNodeComponent("balanceValue"),
    multiLine: makeNodeComponent("multiLine"),
    contents: makeNodeComponent("contents"),
    assetGroupChart: makeNodeComponent("assetGroupChart"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
