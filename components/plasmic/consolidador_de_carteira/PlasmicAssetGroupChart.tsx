// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDBRKAPkGAJGJDHPJiLdSk
// Component: HJ5nLaIXID
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import { PieChart } from "../../PieChart"; // plasmic-import: ABWxKtOQeQ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_consolidador_de_carteira.module.css"; // plasmic-import: iDBRKAPkGAJGJDHPJiLdSk/projectcss
import sty from "./PlasmicAssetGroupChart.module.css"; // plasmic-import: HJ5nLaIXID/css

export type PlasmicAssetGroupChart__VariantMembers = {};
export type PlasmicAssetGroupChart__VariantsArgs = {};
type VariantPropType = keyof PlasmicAssetGroupChart__VariantsArgs;
export const PlasmicAssetGroupChart__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAssetGroupChart__ArgsType = {};
type ArgPropType = keyof PlasmicAssetGroupChart__ArgsType;
export const PlasmicAssetGroupChart__ArgProps = new Array<ArgPropType>();

export type PlasmicAssetGroupChart__OverridesType = {
  root?: p.Flex<"div">;
  groupName?: p.Flex<"div">;
  chart?: p.Flex<typeof PieChart>;
};

export interface DefaultAssetGroupChartProps {
  className?: string;
}

function PlasmicAssetGroupChart__RenderFunc(props: {
  variants: PlasmicAssetGroupChart__VariantsArgs;
  args: PlasmicAssetGroupChart__ArgsType;
  overrides: PlasmicAssetGroupChart__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <div
            data-plasmic-name={"groupName"}
            data-plasmic-override={overrides.groupName}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.groupName
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}

        <PieChart
          data-plasmic-name={"chart"}
          data-plasmic-override={overrides.chart}
          className={classNames("__wab_instance", sty.chart)}
          data={[
            { name: "One", value: 10, color: "#E38627" },
            { name: "Two", value: 15, color: "#C13C37" },
            { name: "Three", value: 20, color: "#6A2135" },
          ]}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "groupName", "chart"],
  groupName: ["groupName"],
  chart: ["chart"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  groupName: "div";
  chart: typeof PieChart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAssetGroupChart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAssetGroupChart__VariantsArgs;
    args?: PlasmicAssetGroupChart__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAssetGroupChart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAssetGroupChart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAssetGroupChart__ArgProps,
          internalVariantPropNames: PlasmicAssetGroupChart__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicAssetGroupChart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAssetGroupChart";
  } else {
    func.displayName = `PlasmicAssetGroupChart.${nodeName}`;
  }
  return func;
}

export const PlasmicAssetGroupChart = Object.assign(
  // Top-level PlasmicAssetGroupChart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    groupName: makeNodeComponent("groupName"),
    chart: makeNodeComponent("chart"),

    // Metadata about props expected for PlasmicAssetGroupChart
    internalVariantProps: PlasmicAssetGroupChart__VariantProps,
    internalArgProps: PlasmicAssetGroupChart__ArgProps,
  }
);

export default PlasmicAssetGroupChart;
/* prettier-ignore-end */
